# -*- coding: utf-8 -*-
"""Kia 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V2lm-yg-U8Au0CE47W966LQ-Zavp5HdL
"""

import tkinter as tk
from tkinter import messagebox
import json

class GUI:
    def __init__(self):
        # Load data from file
        try:
            with open("data.txt", "r") as file:
                self.data = json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            messagebox.showerror("Missing/Invalid file", "The data file is missing or invalid.")
            return

        self.index = 0  # Current category index
        self.total_score = 0  # Total score across categories
        self.category_score = 0  # Score for the current category
        self.lowercase_answers = []  # Lowercase copy of category answers

        # Create main window
        self.window = tk.Tk()
        self.window.title("Know It All")
        self.window.geometry("400x200")

        # Category Label
        self.category_label = tk.Label(self.window, text="Category: ")
        self.category_label.pack()

        # Answer Entry
        self.answer_entry = tk.Entry(self.window)
        self.answer_entry.pack()
        self.answer_entry.focus_set()  # Set focus on answer entry

        # Submit Button
        self.submit_button = tk.Button(self.window, text="Submit", command=self.check_answer)

        # Total score label
        self.total_score_label = tk.Label(self.window, text="Total Score: 0", font=("Arial", 14))
        self.total_score_label.pack(pady=10)
        self.submit_button.pack()

        # Set the initial category
        self.set_category()

        # Start the GUI event loop
        tk.mainloop()

    def set_category(self):
        # Check if all categories have been completed
        if self.index >= len(self.data):
            messagebox.showinfo("Game Over", f"Total Score: {self.total_score}")
            self.window.destroy()
            return

        # Get the current category
        category = self.data[self.index]

        # Initialize category score and lowercase answers
        self.category_score = 0
        self.lowercase_answers = [answer.lower() for answer in category['answers']]

        # Update the category label
        self.category_label.configure(text=f"Category: {self.data[self.index].get('category')}")

        # Update the total score label
        self.total_score_label.configure(text=f"Total Score: {self.total_score}")

        # Clear the answer entry
        self.answer_entry.delete(0, 'end')

        # Set focus on the answer entry
        self.answer_entry.focus_set()

    def check_answer(self):
        user_answer = self.answer_entry.get().lower()
        self.answer_entry.delete(0, tk.END)  # Clear the answer entry

        if user_answer in self.lowercase_answers:
            # Correct answer
            self.category_score += self.data[self.index].get('difficulty', 0)
            self.lowercase_answers.remove(user_answer)
            messagebox.showinfo("Correct", "Your answer is correct!")
        else:
            # Incorrect answer
            messagebox.showinfo("Incorrect", "Your answer is incorrect.")

        if not self.lowercase_answers:
            # Category over, add score and move to the next category
            self.total_score += self.category_score
            self.index += 1
            messagebox.showinfo("Category Over", f"Category Score: {self.category_score}")
            self.set_category()

# Create an instance of the GUI
if __name__ == '__main__':
    gui = GUI()