# -*- coding: utf-8 -*-
"""Kia 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V2lm-yg-U8Au0CE47W966LQ-Zavp5HdL
"""

import tkinter as tk
from tkinter import messagebox
import json


class GUI:
    def __init__(self):
        self.lowercase_answers = None
        self.category_score = None
        try:
            # Try to open and load data from the file
            with open('data.txt', 'r') as file:
                self.data = json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            # Show error message if file is missing or invalid
            messagebox.showerror("Error", "Missing or invalid data file")
            return

        self.index = 0  # Current category index
        self.total_score = 0  # Total score

        # Create the main window
        self.window = tk.Tk()
        self.window.title("Know It All")

        # Category label
        self.category_label = tk.Label(self.window, text="Category: ", font=("Arial", 16))
        self.category_label.pack(pady=10)

        # Answer entry
        self.answer_entry = tk.Entry(self.window, font=("Arial", 14))
        self.answer_entry.pack(pady=10)

        # Submit button
        submit_button = tk.Button(self.window, text="Submit", font=("Arial", 14), command=self.check_answer)
        submit_button.pack(pady=10)

        # Category score label
        self.category_score_label = tk.Label(self.window, text="", font=("Arial", 14))
        self.category_score_label.pack(pady=10)

        # Total score label
        self.total_score_label = tk.Label(self.window, text="", font=("Arial", 14))
        self.total_score_label.pack(pady=10)

        # Call the set_category() method to display the first category
        self.set_category()

        # Start the main loop
        self.window.mainloop()

    def set_category(self):
        # Check if all categories have been completed
        if self.index >= len(self.data):
            messagebox.showinfo("Game Over", f"Total Score: {self.total_score}\n\nThe program will end now.")
            self.window.destroy()
            return

        # Get the current category
        category = self.data[self.index]

        # Initialize category score and lowercase answers
        self.category_score = 0
        self.lowercase_answers = [answer.lower() for answer in category['answers']]

        # Update the category label
        self.category_label.configure(text=f"Category: {self.data[self.index].get('category')}")

        # Update the total score label
        self.total_score_label.configure(text=f"Total Score: {self.total_score}")

        # Clear the answer entry
        self.answer_entry.delete(0, 'end')

        # Set focus on the answer entry
        self.answer_entry.focus_set()

    def check_answer(self):
        # Get the user's answer
        user_answer = self.answer_entry.get().lower()

        # Get the current category
        category = self.data[self.index]

        # Check if the answer is correct
        if user_answer in self.lowercase_answers:
            self.category_score += category['difficulty']
            self.lowercase_answers.remove(user_answer)
            messagebox.showinfo("Correct", "Answer is correct!")
        else:
            messagebox.showinfo("Incorrect", "Answer is incorrect.")

        # Check if all answers have been provided
        if not self.lowercase_answers:
            self.total_score += self.category_score
            if len(category['answers']) == category['difficulty']:
                self.category_score += category['difficulty'] * 2
            messagebox.showinfo("Category Over", f"You scored {self.category_score} points in this category.")
            self.index += 1
            self.set_category()


# Create an instance of the GUI
if __name__ == '__main__':
    gui = GUI()